[flake8]
count = true
max-line-length = 120
max-complexity = 30
exclude = .git, __pycache__, .idea/
# statistics = True
select =
    # -------- https://github.com/best-doctor/flake8-adjustable-complexity --------
    CAC001,
    # func is too complex (complexity > max allowed complexity)
    CAC002,
    # func is too complex (complexity). Bad variable names penalty is too high (penalty)

    # -------- https://github.com/best-doctor/flake8-annotations-coverage --------
    TAE001,
    # Too few type annotations in file

    # -------- https://github.com/sco1/flake8-annotations --------
    ANN001,
    # Missing type annotation for function argument
    ANN002,
    # Missing type annotation for *args
    ANN003,
    # Missing type annotation for **kwargs
    ; ANN101,
    # Missing type annotation for self in method
    ; ANN102,
    # Missing type annotation for cls in classmethod
    ANN201,
    # Missing return type annotation for public function
    ANN202,
    # Missing return type annotation for protected function
    ANN203,
    # Missing return type annotation for secret function
    ANN204,
    # Missing return type annotation for special method
    ANN205,
    # Missing return type annotation for staticmethod
    ANN206,
    # Missing return type annotation for classmethod
    ANN301,
    # PEP 484 disallows both type annotations and type comments
    ANN401,
    # Dynamically typed expressions (typing.Any) are disallowed.2

    # -------- https://github.com/gforcada/flake8-builtins --------
    A001,
    # variable "max" is shadowing a python builtin
    A002,
    # argument "dict" is shadowing a python builtin

    # -------- https://github.com/Melevir/flake8-cognitive-complexity --------
    CCR001,
    # Cognitive complexity is too high (X > Y)

    # -------- https://github.com/adamchainz/flake8-comprehensions --------
    C400,
    C401,
    C402,
    # Unnecessary generator - rewrite as a <list/set/dict> comprehension.
    C403,
    C404,
    # Unnecessary list comprehension - rewrite as a <set/dict> comprehension.
    C405,
    C406,
    #  Unnecessary <list/tuple> literal - rewrite as a <set/dict> literal.
    # C408,
    # Unnecessary <dict/list/tuple> call - rewrite as a literal.
    C409,
    C410,
    # Unnecessary <list/tuple> passed to <list/tuple>() - (remove the outer call to <list/tuple>``()/rewrite as a ``<list/tuple> literal).
    C411,
    # Unnecessary list call - remove the outer call to list().
    C413,
    # Unnecessary <list/reversed> call around sorted().
    C414,
    # Unnecessary <list/reversed/set/sorted/tuple> call within <list/set/sorted/tuple>().
    C415,
    # Unnecessary subscript reversal of iterable within <reversed/set/sorted>().
    C416,
    # Unnecessary <list/set> comprehension - rewrite using <list/set>().
    C417,
    # Unnecessary map usage - rewrite using a generator expression/<list/set/dict> comprehension.

    # -------- https://github.com/wemake-services/flake8-eradicate --------
    # E800,
    # Found commented out code

    # -------- https://github.com/best-doctor/flake8-expression-complexity --------
    ECE001,
    # Expression is too complex (X > Y)

    # -------- https://github.com/best-doctor/flake8-functions --------
    CFQ001,
    # function length (default max length is 100)
    # CFQ002,
    # function arguments number (default max arguments amount is 6)
    CFQ003,
    # function is not pure.
    ; CFQ004,
    # function returns number (default max returns amount is 3)

    # -------- https://github.com/MartinThoma/flake8-simplify --------

    # Python-specific rules:
    SIM101,
    # Multiple isinstance-calls which can be merged into a single call by using a tuple as a second argument (example)
    SIM104,
    #: Use 'yield from iterable' (introduced in Python 3.3, see PEP 380) (example)
    SIM105,
    # Use 'contextlib.suppress(...)' instead of try-except-pass (example)
    SIM107,
    # Don't use return in try/except and finally (example)
    SIM108,
    # Use the ternary operator if it's reasonable (example)
    SIM109,
    # Use a tuple to compare a value against multiple values (example)
    SIM110,
    # Use any(...) (example)
    SIM111,
    # Use all(...) (example)
    SIM113,
    # Use enumerate instead of manually incrementing a counter (example)
    SIM114,
    # Combine conditions via a logical or to prevent duplicating code (example)
    SIM115,
    # Use context handler for opening files (example)
    SIM116,
    # Use a dictionary instead of many if/else equality checks (example)
    SIM117,
    # Merge with-statements that use the same scope (example)
    SIM119,
    #  Moved to flake8-scream due to issue 63
    SIM120,
    #: Use 'class FooBar:' instead of 'class FooBar(object):' (example)
    SIM121,
    # Reserved for SIM908 once it's stable
    SIM125,
    # Reserved for SIM905 once it's stable
    SIM126,
    # Reserved for SIM906 once it's stable
    SIM127,
    # Reserved for SIM907 once it's stable

    # Simplifying Comparisons:
    SIM201,
    # Use 'a != b' instead of 'not a == b' (example)
    SIM202,
    # Use 'a == b' instead of 'not a != b' (example)
    SIM203,
    # Use 'a not in b' instead of 'not (a in b)' (example)
    SIM204,
    #  Moved to flake8-scream due to issue 116
    SIM205,
    #  Moved to flake8-scream due to issue 116
    SIM206,
    #  Moved to flake8-scream due to issue 116
    SIM207,
    #  Moved to flake8-scream due to issue 116
    SIM208,
    # Use 'a' instead of 'not (not a)' (example)
    SIM210,
    # Use 'bool(a)' instead of 'True if a else False' (example)
    SIM211,
    # Use 'not a' instead of 'False if a else True' (example)
    SIM212,
    # Use 'a if a else b' instead of 'b if not a else a' (example)
    SIM220,
    # Use 'False' instead of 'a and not a' (example)
    SIM221,
    # Use 'True' instead of 'a or not a' (example)
    SIM222,
    # Use 'True' instead of '... or True' (example)
    SIM223,
    # Use 'False' instead of '... and False' (example)
    SIM224,
    # Reserved for SIM901 once it's stable
    SIM300,
    # Use 'age == 42' instead of '42 == age' (example)

    # Simplifying usage of dictionaries:
    SIM401,
    # Use 'a_dict.get(key, "default_value")' instead of an if-block (example)
    SIM118,
    # Use 'key in dict' instead of 'key in dict.keys()' (example)

    # General Code Style:
    SIM102,
    # Use a single if-statement instead of nested if-statements (example)
    SIM103,
    # Return the boolean condition directly (example)
    SIM106,
    # Handle error-cases first (example). This rule was removed due to too many false-positives.
    SIM112,
    # Use CAPITAL environment variables (example)
    SIM122,
    #/ SIM902:  Moved to flake8-scream due to issue 125
    SIM123,
    #/ SIM902:  Moved to flake8-scream due to issue 130
    SIM124,
    # Reserved for SIM909 once it's stable

    # Current experimental rules:
    SIM901,
    # Use comparisons directly instead of wrapping them in a bool(...) call (example)
    SIM904,
    # Assign values to dictionary directly at initialization (example)
    SIM905,
    # Split string directly if only constants are used (example)
    SIM906,
    # Merge nested os.path.join calls (example)
    SIM907,
    # Use Optional[Type] instead of Union[Type, None] (example)
    SIM908,
    # Use dict.get(key) (example)
    SIM909,
    # Avoid reflexive assignments (example)

    # -------- https://github.com/MartinThoma/flake8-scream --------
    SCR119,
    #: Use dataclasses for data containers (example)
    SCR902,
    # Use keyword-argument instead of magic boolean (example)
    SCR903,
    # Use keyword-argument instead of magic number (example)

    # -------- https://github.com/i02sopop/flake8-global-variables --------
    # W001,
    # Global variable {0} defined
    W002,
    # Global variable {0} used

    # ---- https://github.com/PyCQA/pep8-naming ----
    # N801,
    # class names should use CapWords convention (class names)
    # N802,
    # function name should be lowercase (function names)
    # N803,
    # argument name should be lowercase (function arguments)
    N804,
    # first argument of a classmethod should be named 'cls' (function arguments)
    N805,
    # first argument of a method should be named 'self' (function arguments)
    N806,
    # variable in function should be lowercase
    N807,
    # function name should not start and end with '__'
    N811,
    # constant imported as non constant (constants)
    N812,
    # lowercase imported as non-lowercase
    N813,
    # camelcase imported as lowercase
    N814,
    # camelcase imported as constant (distinct from N817 for selective enforcement)
    N815,
    # mixedCase variable in class scope (constants, method names)
    N816,
    # mixedCase variable in global scope (constants)
    N817,
    # camelcase imported as acronym (distinct from N814 for selective enforcement)
    N818,
    # error suffix in exception names (exceptions)

    # -------- https://github.com/PyCQA/flake8-bugbear --------
    B001,
    # Do not use bare except:, it also catches unexpected events like memory errors, interrupts, system exit, and so on. Prefer except Exception:. If you're sure what you're doing, be explicit and write except BaseException:. Disable E722 to avoid duplicate warnings.
    B002,
    # Python does not support the unary prefix increment. Writing ++n is equivalent to +(+(n)), which equals n. You meant n += 1.
    B003,
    # Assigning to os.environ doesn't clear the environment. Subprocesses are going to see outdated variables, in disagreement with the current process. Use os.environ.clear() or the env= argument to Popen.
    B004,
    # Using hasattr(x, '__call__') to test if x is callable is unreliable. If x implements custom __getattr__ or its __call__ is itself not callable, you might get misleading results. Use callable(x) for consistent results.
    B005,
    # Using .strip() with multi-character strings is misleading the reader. It looks like stripping a substring. Move your character set to a constant if this is deliberate. Use .replace() or regular expressions to remove string fragments.
    B006,
    # Do not use mutable data structures for argument defaults. They are created during function definition time. All calls to the function reuse this one instance of that data structure, persisting changes between them.
    B007,
    # Loop control variable not used within the loop body. If this is intended, start the name with an underscore.
    B008,
    # Do not perform function calls in argument defaults. The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call. If this is intended, assign the function call to a module-level variable and use that variable as a default value.
    B009,
    # Do not call getattr(x, 'attr'), instead use normal property access: x.attr. Missing a default to getattr will cause an AttributeError to be raised for non-existent properties. There is no additional safety in using getattr if you know the attribute name ahead of time.
    B010,
    # Do not call setattr(x, 'attr', val), instead use normal property access: x.attr = val. There is no additional safety in using setattr if you know the attribute name ahead of time.
    B011,
    # Do not call assert False since python -O removes these calls. Instead callers should raise AssertionError().
    B012,
    # Use of break, continue or return inside finally blocks will silence exceptions or override return values from the try or except blocks. To silence an exception, do it explicitly in the except block. To properly use a break, continue or return refactor your code so these statements are not in the finally block.
    B013,
    # A length-one tuple literal is redundant. Write except SomeError: instead of except (SomeError,):.
    B014,
    # Redundant exception types in except (Exception, TypeError):. Write except Exception:, which catches exactly the same exceptions.
    B015,
    # Pointless comparison. This comparison does nothing but waste CPU instructions. Either prepend assert or remove it.
    B016,
    # Cannot raise a literal. Did you intend to return it or raise an Exception?
    B017,
    # self.assertRaises(Exception): should be considered evil. It can lead to your test passing even if the code being tested is never executed due to a typo. Either assert for a more specific exception (builtin or custom), use assertRaisesRegex, or use the context manager form of assertRaises (with self.assertRaises(Exception) as ex:) with an assertion against the data available in ex.
    B018,
    # Found useless expression. Either assign it to a variable or remove it.
    B019,
    # Use of functools.lru_cache or functools.cache on methods can lead to memory leaks. The cache may retain instance references, preventing garbage collection.
    B020,
    # Loop control variable overrides iterable it iterates
    B021,
    # f-string used as docstring. This will be interpreted by python as a joined string rather than a docstring.
    B022,
    # No arguments passed to contextlib.suppress. No exceptions will be suppressed and therefore this context manager is redundant. N.B. this rule currently does not flag suppress calls to avoid potential false positives due to similarly named user-defined functions.
    B023,
    # Functions defined inside a loop must not use variables redefined in the loop, because late-binding closures are a classic gotcha.

    # -------- https://github.com/sbdchd/flake8-pie --------
    ; PIE781,
    # assign-and-return
    # Based on Clippy's let_and_return and Microsoft's TSLint rule no-unnecessary-local-variable.

    # PIE783,
    # celery-explicit-names
    # Warn about Celery task definitions that don't have explicit names.

    # PIE784,
    # celery-explicit-crontab-args
    # The crontab class provided by Celery has some default args that are suprising to new users. Specifically, crontab(hour="0,12") won't run a task at midnight and noon, it will run the task at every minute during those two hours. This lint makes that call an error, forcing you to write crontab(hour="0, 12", minute="*").

    # PIE785,
    # celery-require-tasks-expire
    # Celery tasks can bunch up if they don't have expirations.

    PIE786,
    # precise-exception-handlers
    # Be precise in what exceptions you catch. Bare except: handlers, catching BaseException, or catching Exception can lead to unexpected bugs.

    PIE787,
    # no-len-condition
    # Empty collections are fasley in Python so calling len() is unnecessary when checking for emptiness in an if statement/expression.

    PIE788,
    # no-bool-condition
    # If statements/expressions evalute the truthiness of the their test argument, so calling bool() is unnecessary.

    PIE789,
    # prefer-isinstance-type-compare
    # Using type() doesn't take into account subclassess and type checkers won't refine the type, use isinstance instead.

    PIE790,
    # no-unnecessary-pass
    # pass is unnecessary when definining a class or function with an empty body.

    PIE791,
    # no-pointless-statements
    # Comparisions without an assignment or assertion are probably a typo.

    # PIE792,  # same as SIM120
    # no-inherit-object
    # Inheriting from object isn't necessary in Python 3.

    PIE793,
    # prefer-dataclass
    # Attempts to find cases where the @dataclass decorator is unintentionally missing.

    PIE794,
    # dupe-class-field-definitions
    # Finds duplicate definitions for the same field, which can occur in large ORM model definitions.

    PIE795,
    # prefer-stdlib-enums
    # Instead of defining various constant properties on a class, use the stdlib enum which typecheckers support for type refinement.

    PIE796,
    # prefer-unique-enums
    # By default the stdlib enum allows multiple field names to map to the same value, this lint requires each enum value be unique.

    PIE797,
    # no-unnecessary-if-expr
    # Call bool() directly rather than reimplementing its functionality.

    PIE798,
    # no-unnecessary-class
    # Instead of using class to namespace functions, use a module.

    PIE799,
    # prefer-col-init
    # Check that values are passed in when collections are created rather than creating an empty collection and then inserting.

    PIE800,
    # no-unnecessary-spread
    # Check for unnecessary dict unpacking.

    PIE801,
    # prefer-simple-return
    # Return boolean expressions directly instead of returning True and False.

    PIE802,
    # prefer-simple-any-all
    # Remove unnecessary comprehensions for any and all

    PIE803,
    # prefer-logging-interpolation
    # Don't format strings before logging. Let logging interpolate arguments.

    PIE804,
    # no-unnecessary-dict-kwargs
    # As long as the keys of the dict are valid Python identifier names, we can safely remove the surrounding dict.

    # PIE805,
    # prefer-literal
    # Currently only checks for byte string literals.

    PIE806,
    # no-assert-except
    # Instead of asserting and catching the exception, use an if statement.

    PIE807,
    # prefer-list-builtin
    # lambda: [] is equivalent to the builtin list

    PIE808,
    # prefer-simple-range
    # We can leave out the first argument to range in some cases since the default start position is 0.

    PIE809,
    # django-prefer-bulk
    # Bulk create multiple objects instead of executing O(N) queries.

    # -------- https://github.com/JBKahn/flake8-print --------
    T201,
    # print found
    T203,
    # pprint found
    T204,
    # pprint declared

    # -------- https://gitlab.com/RoPP/flake8-use-pathlib --------
    PL100,
    # os.path.abspath("foo") should be replaced by foo_path.resolve()
    PL101,
    # os.chmod("foo", 0o444) should be replaced by foo_path.chmod(0o444)
    PL102,
    # os.mkdir("foo") should be replaced by foo_path.mkdir()
    PL103,
    # os.makedirs("foo/bar") should be replaced by bar_path.mkdir(parents=True)
    PL104,
    # os.rename("foo", "bar") should be replaced by foo_path.rename(Path("bar"))
    PL105,
    # os.replace("foo", "bar") should be replaced by foo_path.replace(Path("bar"))
    PL106,
    # os.rmdir("foo") should be replaced by foo_path.rmdir()
    PL107,
    # os.remove("foo") should be replaced by foo_path.unlink()
    PL108,
    # os.unlink("foo") should be replaced by foo_path.unlink()
    PL109,
    # os.getcwd() should be replaced by Path.cwd()
    PL110,
    # os.path.exists("foo") should be replaced by foo_path.exists()
    PL111,
    # os.path.expanduser("~/foo") should be replaced by foo_path.expanduser()
    PL112,
    # os.path.isdir("foo") should be replaced by foo_path.is_dir()
    PL113,
    # os.path.isfile("foo") should be replaced by foo_path.is_file()
    PL114,
    # os.path.islink("foo") should be replaced by foo_path.is_symlink()
    PL115,
    # os.readlink("foo") should be replaced by foo_path.readlink()
    PL116,
    # os.stat("foo") should be replaced by foo_path.stat() or foo_path.owner() or foo_path.group()
    PL117,
    # os.path.isabs should be replaced by foo_path.is_absolute()
    PL118,
    # os.path.join("foo", "bar") should be replaced by foo_path / "bar"
    PL119,
    # os.path.basename("foo/bar") should be replaced by bar_path.name
    PL120,
    # os.path.dirname("foo/bar") should be replaced by bar_path.parent
    PL121,
    # os.path.samefile("foo", "bar") should be replaced by foo_path.samefile(bar_path)
    PL122,
    # os.path.splitext("foo.bar") should be replaced by foo_path.suffix
    PL123,
    # open("foo") should be replaced by Path("foo").open()
    PL124,
    # py.path.local is in maintenance mode, use pathlib instead

    # -------- https://github.com/c0ntribut0r/flake8-grug --------
    GRG001,
    # copy-paste
    GRG002,
    # early quit
    GRG003,
    # eval
    GRG004,
    # try too much
    GRG005,
    # requests no status check

ignore = W503,B011,SIM102,SIM106,SIM111,SIM118,I,JS101,JS102,C408,T002,T003,E203,E501
